// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: app_user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///APP消息通知枚举
public enum STSysMsgNotifyType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 系统消息通知
  case systemNotify // = 0

  /// 动态互动消息通知
  case interactiveNotify // = 1

  /// 私聊消息通知
  case privateChatNotify // = 2

  /// 家族消息通知
  case familyNotify // = 3

  /// 粉丝团徽章等级更新通知
  case fansClubLeveNotify // = 4

  /// 加入粉丝团通知
  case fansClubJoinNotify // = 5

  /// 用户进房存在待处理申请通知
  case bosomFriendPendingNotify // = 6

  /// 贵宾卡等级更新通知
  case honouredGuestCardLevelNotify // = 7

  /// 挚友房间飘屏通知
  case bosomFriendFloatScreenNotify // = 8

  /// 向平台用户推送VIP开通通知
  case vipOpeningNotify // = 9
  case UNRECOGNIZED(Int)

  public init() {
    self = .systemNotify
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .systemNotify
    case 1: self = .interactiveNotify
    case 2: self = .privateChatNotify
    case 3: self = .familyNotify
    case 4: self = .fansClubLeveNotify
    case 5: self = .fansClubJoinNotify
    case 6: self = .bosomFriendPendingNotify
    case 7: self = .honouredGuestCardLevelNotify
    case 8: self = .bosomFriendFloatScreenNotify
    case 9: self = .vipOpeningNotify
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .systemNotify: return 0
    case .interactiveNotify: return 1
    case .privateChatNotify: return 2
    case .familyNotify: return 3
    case .fansClubLeveNotify: return 4
    case .fansClubJoinNotify: return 5
    case .bosomFriendPendingNotify: return 6
    case .honouredGuestCardLevelNotify: return 7
    case .bosomFriendFloatScreenNotify: return 8
    case .vipOpeningNotify: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STSysMsgNotifyType] = [
    .systemNotify,
    .interactiveNotify,
    .privateChatNotify,
    .familyNotify,
    .fansClubLeveNotify,
    .fansClubJoinNotify,
    .bosomFriendPendingNotify,
    .honouredGuestCardLevelNotify,
    .bosomFriendFloatScreenNotify,
    .vipOpeningNotify,
  ]

}

/// 房间抽奖消息
public struct STLotteryNotification: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 冒泡泡抽奖类型
  public var bubbleType: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 全服横幅通知
public struct STAppBannerNotification: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 来源 1.冒泡泡抽奖变身 2.冒泡泡送稀有礼物
  public var source: Int32 {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  /// 频道id
  public var channelID: String {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  /// 用户系统id
  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  /// 用户id
  public var accountID: Int32 {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  /// 用户昵称
  public var nickName: String {
    get {return _storage._nickName}
    set {_uniqueStorage()._nickName = newValue}
  }

  /// 用户头像
  public var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  /// 横幅文案
  public var bannerContent: String {
    get {return _storage._bannerContent}
    set {_uniqueStorage()._bannerContent = newValue}
  }

  /// 横幅样式
  public var bannerStyle: String {
    get {return _storage._bannerStyle}
    set {_uniqueStorage()._bannerStyle = newValue}
  }

  /// 创建时间
  public var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  /// 礼物图标
  public var iconURL: String {
    get {return _storage._iconURL}
    set {_uniqueStorage()._iconURL = newValue}
  }

  /// 房间是否上锁
  public var lockedStatus: Int32 {
    get {return _storage._lockedStatus}
    set {_uniqueStorage()._lockedStatus = newValue}
  }

  /// 礼物名称
  public var giftName: String {
    get {return _storage._giftName}
    set {_uniqueStorage()._giftName = newValue}
  }

  /// 数量
  public var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  /// 房间名称
  public var channelName: String {
    get {return _storage._channelName}
    set {_uniqueStorage()._channelName = newValue}
  }

  /// 目标用户系统id
  public var targetUserID: String {
    get {return _storage._targetUserID}
    set {_uniqueStorage()._targetUserID = newValue}
  }

  /// 目标用户id
  public var targetAccountID: Int32 {
    get {return _storage._targetAccountID}
    set {_uniqueStorage()._targetAccountID = newValue}
  }

  /// 目标用户昵称
  public var targetNickName: String {
    get {return _storage._targetNickName}
    set {_uniqueStorage()._targetNickName = newValue}
  }

  /// 目标用户头像
  public var targetAvatarURL: String {
    get {return _storage._targetAvatarURL}
    set {_uniqueStorage()._targetAvatarURL = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct STUserRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: STUserRequest.OneOf_Body? = nil

  /// 加载用户详情
  public var loadUserDetail: STLoadUserDetailReq {
    get {
      if case .loadUserDetail(let v)? = body {return v}
      return STLoadUserDetailReq()
    }
    set {body = .loadUserDetail(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable, Sendable {
    /// 加载用户详情
    case loadUserDetail(STLoadUserDetailReq)

  }

  public init() {}
}

public struct STUserResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: STUserResponse.OneOf_Body? = nil

  /// 加载用户详情
  public var loadUserDetail: STLoadUserDetailRes {
    get {
      if case .loadUserDetail(let v)? = body {return v}
      return STLoadUserDetailRes()
    }
    set {body = .loadUserDetail(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable, Sendable {
    /// 加载用户详情
    case loadUserDetail(STLoadUserDetailRes)

  }

  public init() {}
}

public struct STLoadUserDetailReq: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct STLoadUserDetailRes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var detail: STUserInDetail {
    get {return _detail ?? STUserInDetail()}
    set {_detail = newValue}
  }
  /// Returns true if `detail` has been explicitly set.
  public var hasDetail: Bool {return self._detail != nil}
  /// Clears the value of `detail`. Subsequent reads from it will return its default value.
  public mutating func clearDetail() {self._detail = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _detail: STUserInDetail? = nil
}

public struct STUserInDetail: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var user: STUserInCommon {
    get {return _user ?? STUserInCommon()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _user: STUserInCommon? = nil
}

/// 消息通知
public struct STSysMsgNotification: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sysMsgType: STSysMsgNotifyType {
    get {return _storage._sysMsgType}
    set {_uniqueStorage()._sysMsgType = newValue}
  }

  ///消息数量
  public var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  ///是否有未读消息 0否1是
  public var unread: Int32 {
    get {return _storage._unread}
    set {_uniqueStorage()._unread = newValue}
  }

  ///昵称
  public var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  ///头像
  public var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  ///等级
  public var level: Int32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  /// 徽章、物品icon
  public var badgeIcon: String {
    get {return _storage._badgeIcon}
    set {_uniqueStorage()._badgeIcon = newValue}
  }

  /// 徽章、物品名称
  public var badgeName: String {
    get {return _storage._badgeName}
    set {_uniqueStorage()._badgeName = newValue}
  }

  /// 申请ID
  public var applyID: Int64 {
    get {return _storage._applyID}
    set {_uniqueStorage()._applyID = newValue}
  }

  /// 类型 1发起申请 2接收申请 10上麦 11进房（sysMsgType==9 type: 1开通 2续费）
  public var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 开始时间戳
  public var startTimestamp: Int64 {
    get {return _storage._startTimestamp}
    set {_uniqueStorage()._startTimestamp = newValue}
  }

  /// 结束时间戳
  public var endTimestamp: Int64 {
    get {return _storage._endTimestamp}
    set {_uniqueStorage()._endTimestamp = newValue}
  }

  /// 系统时间戳
  public var sysTimestamp: Int64 {
    get {return _storage._sysTimestamp}
    set {_uniqueStorage()._sysTimestamp = newValue}
  }

  /// 动效地址
  public var effectsURL: String {
    get {return _storage._effectsURL}
    set {_uniqueStorage()._effectsURL = newValue}
  }

  /// 房间Id
  public var channelID: String {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  ///目标用户Id
  public var targetID: String {
    get {return _storage._targetID}
    set {_uniqueStorage()._targetID = newValue}
  }

  ///操作类型 1房间内申请挚友 2用户主页申请挚友
  public var operateType: Int32 {
    get {return _storage._operateType}
    set {_uniqueStorage()._operateType = newValue}
  }

  ///关系标签名称
  public var labelName: String {
    get {return _storage._labelName}
    set {_uniqueStorage()._labelName = newValue}
  }

  ///背景样式
  public var backdropURL: String {
    get {return _storage._backdropURL}
    set {_uniqueStorage()._backdropURL = newValue}
  }

  ///提示样式-小
  public var promptURL: String {
    get {return _storage._promptURL}
    set {_uniqueStorage()._promptURL = newValue}
  }

  ///字体颜色
  public var fontColor: String {
    get {return _storage._fontColor}
    set {_uniqueStorage()._fontColor = newValue}
  }

  ///贵宾卡图标
  public var honouredGestURL: String {
    get {return _storage._honouredGestURL}
    set {_uniqueStorage()._honouredGestURL = newValue}
  }

  ///用户Id
  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  ///目标用户昵称
  public var targetNickname: String {
    get {return _storage._targetNickname}
    set {_uniqueStorage()._targetNickname = newValue}
  }

  public var levelName: String {
    get {return _storage._levelName}
    set {_uniqueStorage()._levelName = newValue}
  }

  ///提示样式-中
  public var promptURL1: String {
    get {return _storage._promptURL1}
    set {_uniqueStorage()._promptURL1 = newValue}
  }

  ///提示样式-大
  public var promptURL2: String {
    get {return _storage._promptURL2}
    set {_uniqueStorage()._promptURL2 = newValue}
  }

  /// 时间戳
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// 消息内容
  public var msgContent: String {
    get {return _storage._msgContent}
    set {_uniqueStorage()._msgContent = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 挚友消息通知
public struct STBosomFriendDto: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///申请Id
  public var applyID: Int64 {
    get {return _storage._applyID}
    set {_uniqueStorage()._applyID = newValue}
  }

  ///发起申请用户Id
  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  ///发起申请用户小白号
  public var accountID: Int32 {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  ///发起申请用户昵称
  public var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  ///发起申请用户头像
  public var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  ///目标用户Id
  public var targetID: String {
    get {return _storage._targetID}
    set {_uniqueStorage()._targetID = newValue}
  }

  ///目标用户小白号
  public var targetAccountID: Int32 {
    get {return _storage._targetAccountID}
    set {_uniqueStorage()._targetAccountID = newValue}
  }

  ///目标用户昵称
  public var targetNickname: String {
    get {return _storage._targetNickname}
    set {_uniqueStorage()._targetNickname = newValue}
  }

  ///目标用户头像
  public var targetAvatarURL: String {
    get {return _storage._targetAvatarURL}
    set {_uniqueStorage()._targetAvatarURL = newValue}
  }

  ///申请生效时间戳
  public var effectiveTimeTamp: Int64 {
    get {return _storage._effectiveTimeTamp}
    set {_uniqueStorage()._effectiveTimeTamp = newValue}
  }

  ///申请失效时间戳
  public var expireTimeTamp: Int64 {
    get {return _storage._expireTimeTamp}
    set {_uniqueStorage()._expireTimeTamp = newValue}
  }

  ///当前系统时间戳
  public var sysTimeTamp: Int64 {
    get {return _storage._sysTimeTamp}
    set {_uniqueStorage()._sysTimeTamp = newValue}
  }

  ///申请备注
  public var remark: String {
    get {return _storage._remark}
    set {_uniqueStorage()._remark = newValue}
  }

  ///申请实际有效时间（秒）
  public var effectiveMinute: Int32 {
    get {return _storage._effectiveMinute}
    set {_uniqueStorage()._effectiveMinute = newValue}
  }

  ///操作类型 1房间内申请挚友 2用户主页申请挚友 10申请解除挚友
  public var operateType: Int32 {
    get {return _storage._operateType}
    set {_uniqueStorage()._operateType = newValue}
  }

  ///关系标签Id
  public var labelID: String {
    get {return _storage._labelID}
    set {_uniqueStorage()._labelID = newValue}
  }

  ///关系标签名称
  public var labelName: String {
    get {return _storage._labelName}
    set {_uniqueStorage()._labelName = newValue}
  }

  ///数量
  public var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  ///来源 1收到新的挚友申请 2挚友申请处理-通过 3挚友申请处理-拒绝 4挚友申请处理-超时拒绝 10挚友申请公屏通知 11挚友解绑私聊通知
  public var source: Int32 {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  ///房间Id
  public var channelID: String {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  ///审核处理时间
  public var auditTime: Int64 {
    get {return _storage._auditTime}
    set {_uniqueStorage()._auditTime = newValue}
  }

  public var giftValue: Int32 {
    get {return _storage._giftValue}
    set {_uniqueStorage()._giftValue = newValue}
  }

  public var giftName: String {
    get {return _storage._giftName}
    set {_uniqueStorage()._giftName = newValue}
  }

  public var giftIconURL: String {
    get {return _storage._giftIconURL}
    set {_uniqueStorage()._giftIconURL = newValue}
  }

  ///类型
  public var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 挚友申请书样式
  public var applyStyleURL: String {
    get {return _storage._applyStyleURL}
    set {_uniqueStorage()._applyStyleURL = newValue}
  }

  /// 亮图标
  public var brightURL: String {
    get {return _storage._brightURL}
    set {_uniqueStorage()._brightURL = newValue}
  }

  /// 灰图标
  public var greyURL: String {
    get {return _storage._greyURL}
    set {_uniqueStorage()._greyURL = newValue}
  }

  /// 礼物框
  public var giftBackdropURL: String {
    get {return _storage._giftBackdropURL}
    set {_uniqueStorage()._giftBackdropURL = newValue}
  }

  /// 同意按钮图标
  public var agreeBtnURL: String {
    get {return _storage._agreeBtnURL}
    set {_uniqueStorage()._agreeBtnURL = newValue}
  }

  /// 拒绝按钮图标
  public var refuseBtnURL: String {
    get {return _storage._refuseBtnURL}
    set {_uniqueStorage()._refuseBtnURL = newValue}
  }

  /// 同意弹窗图
  public var agreePopupURL: String {
    get {return _storage._agreePopupURL}
    set {_uniqueStorage()._agreePopupURL = newValue}
  }

  /// 拒绝弹窗图
  public var refusePopupURL: String {
    get {return _storage._refusePopupURL}
    set {_uniqueStorage()._refusePopupURL = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///消息通知列表
public struct STSysMsgNotifications: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var notifications: [STSysMsgNotification] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// vip消息通知
public struct STVipNotification: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vipID: Int64 = 0

  public var userID: String = String()

  public var levelID: Int32 = 0

  public var levelName: String = String()

  public var level: Int32 = 0

  public var levelIcon: String = String()

  public var levelEffect: String = String()

  public var effectiveTimestamp: Int64 = 0

  public var expireTimestamp: Int64 = 0

  public var guardTimestamp: Int64 = 0

  ///类型 1：vip开通成功通知
  public var type: Int32 = 0

  public var fontColor: String = String()

  public var nameColor: String = String()

  /// 是否有元宇宙特权
  public var metaverse: Int32 = 0

  /// 是否有隐身进房特权
  public var cloaking: Int32 = 0

  /// 是否有禁止干扰特权（防踢防拉黑防禁言）
  public var inhibitNoise: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 幻灵消息通知
public struct STEidolonNotification: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 消息类型
  public var messageType: STEidolonMessageType = .notset

  /// 操作者ID
  public var userID: String = String()

  ///跳转内容
  public var linkValue: String = String()

  ///图片
  public var imgURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension STSysMsgNotifyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SystemNotify"),
    1: .same(proto: "InteractiveNotify"),
    2: .same(proto: "PrivateChatNotify"),
    3: .same(proto: "FamilyNotify"),
    4: .same(proto: "FansClubLeveNotify"),
    5: .same(proto: "FansClubJoinNotify"),
    6: .same(proto: "BosomFriendPendingNotify"),
    7: .same(proto: "HonouredGuestCardLevelNotify"),
    8: .same(proto: "BosomFriendFloatScreenNotify"),
    9: .same(proto: "VipOpeningNotify"),
  ]
}

extension STLotteryNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LotteryNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bubbleType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bubbleType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bubbleType != 0 {
      try visitor.visitSingularInt32Field(value: self.bubbleType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STLotteryNotification, rhs: STLotteryNotification) -> Bool {
    if lhs.bubbleType != rhs.bubbleType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STAppBannerNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AppBannerNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "channelId"),
    3: .same(proto: "userId"),
    4: .same(proto: "accountId"),
    5: .same(proto: "nickName"),
    6: .same(proto: "avatarUrl"),
    7: .same(proto: "bannerContent"),
    8: .same(proto: "bannerStyle"),
    9: .same(proto: "createTime"),
    10: .same(proto: "iconUrl"),
    11: .same(proto: "lockedStatus"),
    12: .same(proto: "giftName"),
    13: .same(proto: "count"),
    14: .same(proto: "channelName"),
    15: .same(proto: "targetUserId"),
    16: .same(proto: "targetAccountId"),
    17: .same(proto: "targetNickName"),
    18: .same(proto: "targetAvatarUrl"),
  ]

  fileprivate class _StorageClass {
    var _source: Int32 = 0
    var _channelID: String = String()
    var _userID: String = String()
    var _accountID: Int32 = 0
    var _nickName: String = String()
    var _avatarURL: String = String()
    var _bannerContent: String = String()
    var _bannerStyle: String = String()
    var _createTime: Int64 = 0
    var _iconURL: String = String()
    var _lockedStatus: Int32 = 0
    var _giftName: String = String()
    var _count: Int32 = 0
    var _channelName: String = String()
    var _targetUserID: String = String()
    var _targetAccountID: Int32 = 0
    var _targetNickName: String = String()
    var _targetAvatarURL: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _source = source._source
      _channelID = source._channelID
      _userID = source._userID
      _accountID = source._accountID
      _nickName = source._nickName
      _avatarURL = source._avatarURL
      _bannerContent = source._bannerContent
      _bannerStyle = source._bannerStyle
      _createTime = source._createTime
      _iconURL = source._iconURL
      _lockedStatus = source._lockedStatus
      _giftName = source._giftName
      _count = source._count
      _channelName = source._channelName
      _targetUserID = source._targetUserID
      _targetAccountID = source._targetAccountID
      _targetNickName = source._targetNickName
      _targetAvatarURL = source._targetAvatarURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._source) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._channelID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._accountID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._nickName) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._avatarURL) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._bannerContent) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._bannerStyle) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._createTime) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._iconURL) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._lockedStatus) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._giftName) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._count) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._channelName) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._targetUserID) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._targetAccountID) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._targetNickName) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._targetAvatarURL) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._source != 0 {
        try visitor.visitSingularInt32Field(value: _storage._source, fieldNumber: 1)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelID, fieldNumber: 2)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 3)
      }
      if _storage._accountID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._accountID, fieldNumber: 4)
      }
      if !_storage._nickName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickName, fieldNumber: 5)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 6)
      }
      if !_storage._bannerContent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerContent, fieldNumber: 7)
      }
      if !_storage._bannerStyle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerStyle, fieldNumber: 8)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 9)
      }
      if !_storage._iconURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iconURL, fieldNumber: 10)
      }
      if _storage._lockedStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lockedStatus, fieldNumber: 11)
      }
      if !_storage._giftName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._giftName, fieldNumber: 12)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 13)
      }
      if !_storage._channelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelName, fieldNumber: 14)
      }
      if !_storage._targetUserID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetUserID, fieldNumber: 15)
      }
      if _storage._targetAccountID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._targetAccountID, fieldNumber: 16)
      }
      if !_storage._targetNickName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetNickName, fieldNumber: 17)
      }
      if !_storage._targetAvatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetAvatarURL, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STAppBannerNotification, rhs: STAppBannerNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._source != rhs_storage._source {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._nickName != rhs_storage._nickName {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._bannerContent != rhs_storage._bannerContent {return false}
        if _storage._bannerStyle != rhs_storage._bannerStyle {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._iconURL != rhs_storage._iconURL {return false}
        if _storage._lockedStatus != rhs_storage._lockedStatus {return false}
        if _storage._giftName != rhs_storage._giftName {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._channelName != rhs_storage._channelName {return false}
        if _storage._targetUserID != rhs_storage._targetUserID {return false}
        if _storage._targetAccountID != rhs_storage._targetAccountID {return false}
        if _storage._targetNickName != rhs_storage._targetNickName {return false}
        if _storage._targetAvatarURL != rhs_storage._targetAvatarURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STUserRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UserRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    20: .standard(proto: "load_user_detail"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 20: try {
        var v: STLoadUserDetailReq?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .loadUserDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .loadUserDetail(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .loadUserDetail(let v)? = self.body {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STUserRequest, rhs: STUserRequest) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STUserResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UserResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    20: .standard(proto: "load_user_detail"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 20: try {
        var v: STLoadUserDetailRes?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .loadUserDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .loadUserDetail(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .loadUserDetail(let v)? = self.body {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STUserResponse, rhs: STUserResponse) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STLoadUserDetailReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LoadUserDetailReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STLoadUserDetailReq, rhs: STLoadUserDetailReq) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STLoadUserDetailRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LoadUserDetailRes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "detail"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._detail) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._detail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STLoadUserDetailRes, rhs: STLoadUserDetailRes) -> Bool {
    if lhs._detail != rhs._detail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STUserInDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UserInDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STUserInDetail, rhs: STUserInDetail) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STSysMsgNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SysMsgNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sysMsgType"),
    2: .same(proto: "count"),
    3: .same(proto: "unread"),
    4: .same(proto: "nickname"),
    5: .same(proto: "avatarUrl"),
    6: .same(proto: "level"),
    7: .same(proto: "badgeIcon"),
    8: .same(proto: "badgeName"),
    9: .same(proto: "applyId"),
    10: .same(proto: "type"),
    11: .same(proto: "startTimestamp"),
    12: .same(proto: "endTimestamp"),
    13: .same(proto: "sysTimestamp"),
    14: .same(proto: "effectsUrl"),
    15: .same(proto: "channelId"),
    16: .same(proto: "targetId"),
    17: .same(proto: "operateType"),
    18: .same(proto: "labelName"),
    19: .same(proto: "backdropUrl"),
    20: .same(proto: "promptUrl"),
    21: .same(proto: "fontColor"),
    22: .same(proto: "honouredGestUrl"),
    23: .same(proto: "userId"),
    24: .same(proto: "targetNickname"),
    25: .same(proto: "levelName"),
    26: .same(proto: "promptUrl1"),
    27: .same(proto: "promptUrl2"),
    28: .same(proto: "timestamp"),
    29: .same(proto: "msgContent"),
  ]

  fileprivate class _StorageClass {
    var _sysMsgType: STSysMsgNotifyType = .systemNotify
    var _count: Int32 = 0
    var _unread: Int32 = 0
    var _nickname: String = String()
    var _avatarURL: String = String()
    var _level: Int32 = 0
    var _badgeIcon: String = String()
    var _badgeName: String = String()
    var _applyID: Int64 = 0
    var _type: Int32 = 0
    var _startTimestamp: Int64 = 0
    var _endTimestamp: Int64 = 0
    var _sysTimestamp: Int64 = 0
    var _effectsURL: String = String()
    var _channelID: String = String()
    var _targetID: String = String()
    var _operateType: Int32 = 0
    var _labelName: String = String()
    var _backdropURL: String = String()
    var _promptURL: String = String()
    var _fontColor: String = String()
    var _honouredGestURL: String = String()
    var _userID: String = String()
    var _targetNickname: String = String()
    var _levelName: String = String()
    var _promptURL1: String = String()
    var _promptURL2: String = String()
    var _timestamp: Int64 = 0
    var _msgContent: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _sysMsgType = source._sysMsgType
      _count = source._count
      _unread = source._unread
      _nickname = source._nickname
      _avatarURL = source._avatarURL
      _level = source._level
      _badgeIcon = source._badgeIcon
      _badgeName = source._badgeName
      _applyID = source._applyID
      _type = source._type
      _startTimestamp = source._startTimestamp
      _endTimestamp = source._endTimestamp
      _sysTimestamp = source._sysTimestamp
      _effectsURL = source._effectsURL
      _channelID = source._channelID
      _targetID = source._targetID
      _operateType = source._operateType
      _labelName = source._labelName
      _backdropURL = source._backdropURL
      _promptURL = source._promptURL
      _fontColor = source._fontColor
      _honouredGestURL = source._honouredGestURL
      _userID = source._userID
      _targetNickname = source._targetNickname
      _levelName = source._levelName
      _promptURL1 = source._promptURL1
      _promptURL2 = source._promptURL2
      _timestamp = source._timestamp
      _msgContent = source._msgContent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._sysMsgType) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._count) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._unread) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._avatarURL) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._level) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._badgeIcon) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._badgeName) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._applyID) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._type) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._startTimestamp) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._endTimestamp) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._sysTimestamp) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._effectsURL) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._channelID) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._targetID) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._operateType) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._labelName) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._backdropURL) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._promptURL) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._fontColor) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._honouredGestURL) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._targetNickname) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._levelName) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._promptURL1) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._promptURL2) }()
        case 28: try { try decoder.decodeSingularInt64Field(value: &_storage._timestamp) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._msgContent) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._sysMsgType != .systemNotify {
        try visitor.visitSingularEnumField(value: _storage._sysMsgType, fieldNumber: 1)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 2)
      }
      if _storage._unread != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unread, fieldNumber: 3)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 4)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 5)
      }
      if _storage._level != 0 {
        try visitor.visitSingularInt32Field(value: _storage._level, fieldNumber: 6)
      }
      if !_storage._badgeIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badgeIcon, fieldNumber: 7)
      }
      if !_storage._badgeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badgeName, fieldNumber: 8)
      }
      if _storage._applyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._applyID, fieldNumber: 9)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 10)
      }
      if _storage._startTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTimestamp, fieldNumber: 11)
      }
      if _storage._endTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endTimestamp, fieldNumber: 12)
      }
      if _storage._sysTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sysTimestamp, fieldNumber: 13)
      }
      if !_storage._effectsURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._effectsURL, fieldNumber: 14)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelID, fieldNumber: 15)
      }
      if !_storage._targetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetID, fieldNumber: 16)
      }
      if _storage._operateType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._operateType, fieldNumber: 17)
      }
      if !_storage._labelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._labelName, fieldNumber: 18)
      }
      if !_storage._backdropURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._backdropURL, fieldNumber: 19)
      }
      if !_storage._promptURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._promptURL, fieldNumber: 20)
      }
      if !_storage._fontColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fontColor, fieldNumber: 21)
      }
      if !_storage._honouredGestURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._honouredGestURL, fieldNumber: 22)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 23)
      }
      if !_storage._targetNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetNickname, fieldNumber: 24)
      }
      if !_storage._levelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._levelName, fieldNumber: 25)
      }
      if !_storage._promptURL1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._promptURL1, fieldNumber: 26)
      }
      if !_storage._promptURL2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._promptURL2, fieldNumber: 27)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 28)
      }
      if !_storage._msgContent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgContent, fieldNumber: 29)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STSysMsgNotification, rhs: STSysMsgNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sysMsgType != rhs_storage._sysMsgType {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._unread != rhs_storage._unread {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._badgeIcon != rhs_storage._badgeIcon {return false}
        if _storage._badgeName != rhs_storage._badgeName {return false}
        if _storage._applyID != rhs_storage._applyID {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._startTimestamp != rhs_storage._startTimestamp {return false}
        if _storage._endTimestamp != rhs_storage._endTimestamp {return false}
        if _storage._sysTimestamp != rhs_storage._sysTimestamp {return false}
        if _storage._effectsURL != rhs_storage._effectsURL {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._operateType != rhs_storage._operateType {return false}
        if _storage._labelName != rhs_storage._labelName {return false}
        if _storage._backdropURL != rhs_storage._backdropURL {return false}
        if _storage._promptURL != rhs_storage._promptURL {return false}
        if _storage._fontColor != rhs_storage._fontColor {return false}
        if _storage._honouredGestURL != rhs_storage._honouredGestURL {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._targetNickname != rhs_storage._targetNickname {return false}
        if _storage._levelName != rhs_storage._levelName {return false}
        if _storage._promptURL1 != rhs_storage._promptURL1 {return false}
        if _storage._promptURL2 != rhs_storage._promptURL2 {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._msgContent != rhs_storage._msgContent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STBosomFriendDto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BosomFriendDto"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "applyId"),
    2: .same(proto: "userId"),
    3: .same(proto: "accountId"),
    4: .same(proto: "nickname"),
    5: .same(proto: "avatarUrl"),
    6: .same(proto: "targetId"),
    7: .same(proto: "targetAccountId"),
    8: .same(proto: "targetNickname"),
    9: .same(proto: "targetAvatarUrl"),
    10: .same(proto: "effectiveTimeTamp"),
    11: .same(proto: "expireTimeTamp"),
    12: .same(proto: "sysTimeTamp"),
    13: .same(proto: "remark"),
    14: .same(proto: "effectiveMinute"),
    15: .same(proto: "operateType"),
    16: .same(proto: "labelId"),
    17: .same(proto: "labelName"),
    18: .same(proto: "count"),
    19: .same(proto: "source"),
    20: .same(proto: "channelId"),
    21: .same(proto: "auditTime"),
    22: .same(proto: "giftValue"),
    23: .same(proto: "giftName"),
    24: .same(proto: "giftIconUrl"),
    25: .same(proto: "type"),
    100: .same(proto: "applyStyleUrl"),
    101: .same(proto: "brightUrl"),
    102: .same(proto: "greyUrl"),
    103: .same(proto: "giftBackdropUrl"),
    104: .same(proto: "agreeBtnUrl"),
    105: .same(proto: "refuseBtnUrl"),
    106: .same(proto: "agreePopupUrl"),
    107: .same(proto: "refusePopupUrl"),
  ]

  fileprivate class _StorageClass {
    var _applyID: Int64 = 0
    var _userID: String = String()
    var _accountID: Int32 = 0
    var _nickname: String = String()
    var _avatarURL: String = String()
    var _targetID: String = String()
    var _targetAccountID: Int32 = 0
    var _targetNickname: String = String()
    var _targetAvatarURL: String = String()
    var _effectiveTimeTamp: Int64 = 0
    var _expireTimeTamp: Int64 = 0
    var _sysTimeTamp: Int64 = 0
    var _remark: String = String()
    var _effectiveMinute: Int32 = 0
    var _operateType: Int32 = 0
    var _labelID: String = String()
    var _labelName: String = String()
    var _count: Int32 = 0
    var _source: Int32 = 0
    var _channelID: String = String()
    var _auditTime: Int64 = 0
    var _giftValue: Int32 = 0
    var _giftName: String = String()
    var _giftIconURL: String = String()
    var _type: Int32 = 0
    var _applyStyleURL: String = String()
    var _brightURL: String = String()
    var _greyURL: String = String()
    var _giftBackdropURL: String = String()
    var _agreeBtnURL: String = String()
    var _refuseBtnURL: String = String()
    var _agreePopupURL: String = String()
    var _refusePopupURL: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _applyID = source._applyID
      _userID = source._userID
      _accountID = source._accountID
      _nickname = source._nickname
      _avatarURL = source._avatarURL
      _targetID = source._targetID
      _targetAccountID = source._targetAccountID
      _targetNickname = source._targetNickname
      _targetAvatarURL = source._targetAvatarURL
      _effectiveTimeTamp = source._effectiveTimeTamp
      _expireTimeTamp = source._expireTimeTamp
      _sysTimeTamp = source._sysTimeTamp
      _remark = source._remark
      _effectiveMinute = source._effectiveMinute
      _operateType = source._operateType
      _labelID = source._labelID
      _labelName = source._labelName
      _count = source._count
      _source = source._source
      _channelID = source._channelID
      _auditTime = source._auditTime
      _giftValue = source._giftValue
      _giftName = source._giftName
      _giftIconURL = source._giftIconURL
      _type = source._type
      _applyStyleURL = source._applyStyleURL
      _brightURL = source._brightURL
      _greyURL = source._greyURL
      _giftBackdropURL = source._giftBackdropURL
      _agreeBtnURL = source._agreeBtnURL
      _refuseBtnURL = source._refuseBtnURL
      _agreePopupURL = source._agreePopupURL
      _refusePopupURL = source._refusePopupURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._applyID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._accountID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._avatarURL) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._targetID) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._targetAccountID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._targetNickname) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._targetAvatarURL) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._effectiveTimeTamp) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._expireTimeTamp) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._sysTimeTamp) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._remark) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._effectiveMinute) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._operateType) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._labelID) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._labelName) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._count) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._source) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._channelID) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._auditTime) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._giftValue) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._giftName) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._giftIconURL) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._type) }()
        case 100: try { try decoder.decodeSingularStringField(value: &_storage._applyStyleURL) }()
        case 101: try { try decoder.decodeSingularStringField(value: &_storage._brightURL) }()
        case 102: try { try decoder.decodeSingularStringField(value: &_storage._greyURL) }()
        case 103: try { try decoder.decodeSingularStringField(value: &_storage._giftBackdropURL) }()
        case 104: try { try decoder.decodeSingularStringField(value: &_storage._agreeBtnURL) }()
        case 105: try { try decoder.decodeSingularStringField(value: &_storage._refuseBtnURL) }()
        case 106: try { try decoder.decodeSingularStringField(value: &_storage._agreePopupURL) }()
        case 107: try { try decoder.decodeSingularStringField(value: &_storage._refusePopupURL) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._applyID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._applyID, fieldNumber: 1)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 2)
      }
      if _storage._accountID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._accountID, fieldNumber: 3)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 4)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 5)
      }
      if !_storage._targetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetID, fieldNumber: 6)
      }
      if _storage._targetAccountID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._targetAccountID, fieldNumber: 7)
      }
      if !_storage._targetNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetNickname, fieldNumber: 8)
      }
      if !_storage._targetAvatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetAvatarURL, fieldNumber: 9)
      }
      if _storage._effectiveTimeTamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._effectiveTimeTamp, fieldNumber: 10)
      }
      if _storage._expireTimeTamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expireTimeTamp, fieldNumber: 11)
      }
      if _storage._sysTimeTamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sysTimeTamp, fieldNumber: 12)
      }
      if !_storage._remark.isEmpty {
        try visitor.visitSingularStringField(value: _storage._remark, fieldNumber: 13)
      }
      if _storage._effectiveMinute != 0 {
        try visitor.visitSingularInt32Field(value: _storage._effectiveMinute, fieldNumber: 14)
      }
      if _storage._operateType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._operateType, fieldNumber: 15)
      }
      if !_storage._labelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._labelID, fieldNumber: 16)
      }
      if !_storage._labelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._labelName, fieldNumber: 17)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 18)
      }
      if _storage._source != 0 {
        try visitor.visitSingularInt32Field(value: _storage._source, fieldNumber: 19)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelID, fieldNumber: 20)
      }
      if _storage._auditTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._auditTime, fieldNumber: 21)
      }
      if _storage._giftValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._giftValue, fieldNumber: 22)
      }
      if !_storage._giftName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._giftName, fieldNumber: 23)
      }
      if !_storage._giftIconURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._giftIconURL, fieldNumber: 24)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 25)
      }
      if !_storage._applyStyleURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._applyStyleURL, fieldNumber: 100)
      }
      if !_storage._brightURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brightURL, fieldNumber: 101)
      }
      if !_storage._greyURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._greyURL, fieldNumber: 102)
      }
      if !_storage._giftBackdropURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._giftBackdropURL, fieldNumber: 103)
      }
      if !_storage._agreeBtnURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._agreeBtnURL, fieldNumber: 104)
      }
      if !_storage._refuseBtnURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refuseBtnURL, fieldNumber: 105)
      }
      if !_storage._agreePopupURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._agreePopupURL, fieldNumber: 106)
      }
      if !_storage._refusePopupURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._refusePopupURL, fieldNumber: 107)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STBosomFriendDto, rhs: STBosomFriendDto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._applyID != rhs_storage._applyID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._targetAccountID != rhs_storage._targetAccountID {return false}
        if _storage._targetNickname != rhs_storage._targetNickname {return false}
        if _storage._targetAvatarURL != rhs_storage._targetAvatarURL {return false}
        if _storage._effectiveTimeTamp != rhs_storage._effectiveTimeTamp {return false}
        if _storage._expireTimeTamp != rhs_storage._expireTimeTamp {return false}
        if _storage._sysTimeTamp != rhs_storage._sysTimeTamp {return false}
        if _storage._remark != rhs_storage._remark {return false}
        if _storage._effectiveMinute != rhs_storage._effectiveMinute {return false}
        if _storage._operateType != rhs_storage._operateType {return false}
        if _storage._labelID != rhs_storage._labelID {return false}
        if _storage._labelName != rhs_storage._labelName {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._auditTime != rhs_storage._auditTime {return false}
        if _storage._giftValue != rhs_storage._giftValue {return false}
        if _storage._giftName != rhs_storage._giftName {return false}
        if _storage._giftIconURL != rhs_storage._giftIconURL {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._applyStyleURL != rhs_storage._applyStyleURL {return false}
        if _storage._brightURL != rhs_storage._brightURL {return false}
        if _storage._greyURL != rhs_storage._greyURL {return false}
        if _storage._giftBackdropURL != rhs_storage._giftBackdropURL {return false}
        if _storage._agreeBtnURL != rhs_storage._agreeBtnURL {return false}
        if _storage._refuseBtnURL != rhs_storage._refuseBtnURL {return false}
        if _storage._agreePopupURL != rhs_storage._agreePopupURL {return false}
        if _storage._refusePopupURL != rhs_storage._refusePopupURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STSysMsgNotifications: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SysMsgNotifications"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notifications"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.notifications) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.notifications.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notifications, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STSysMsgNotifications, rhs: STSysMsgNotifications) -> Bool {
    if lhs.notifications != rhs.notifications {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STVipNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "VipNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vipId"),
    2: .same(proto: "userId"),
    3: .same(proto: "levelId"),
    4: .same(proto: "levelName"),
    5: .same(proto: "level"),
    6: .same(proto: "levelIcon"),
    7: .same(proto: "levelEffect"),
    8: .same(proto: "effectiveTimestamp"),
    9: .same(proto: "expireTimestamp"),
    10: .same(proto: "guardTimestamp"),
    11: .same(proto: "type"),
    12: .same(proto: "fontColor"),
    13: .same(proto: "nameColor"),
    14: .same(proto: "metaverse"),
    15: .same(proto: "cloaking"),
    16: .same(proto: "inhibitNoise"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.vipID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.levelID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.levelName) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.level) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.levelIcon) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.levelEffect) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.effectiveTimestamp) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.expireTimestamp) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.guardTimestamp) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.fontColor) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.nameColor) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self.metaverse) }()
      case 15: try { try decoder.decodeSingularInt32Field(value: &self.cloaking) }()
      case 16: try { try decoder.decodeSingularInt32Field(value: &self.inhibitNoise) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.vipID != 0 {
      try visitor.visitSingularInt64Field(value: self.vipID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.levelID != 0 {
      try visitor.visitSingularInt32Field(value: self.levelID, fieldNumber: 3)
    }
    if !self.levelName.isEmpty {
      try visitor.visitSingularStringField(value: self.levelName, fieldNumber: 4)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 5)
    }
    if !self.levelIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.levelIcon, fieldNumber: 6)
    }
    if !self.levelEffect.isEmpty {
      try visitor.visitSingularStringField(value: self.levelEffect, fieldNumber: 7)
    }
    if self.effectiveTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.effectiveTimestamp, fieldNumber: 8)
    }
    if self.expireTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.expireTimestamp, fieldNumber: 9)
    }
    if self.guardTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.guardTimestamp, fieldNumber: 10)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 11)
    }
    if !self.fontColor.isEmpty {
      try visitor.visitSingularStringField(value: self.fontColor, fieldNumber: 12)
    }
    if !self.nameColor.isEmpty {
      try visitor.visitSingularStringField(value: self.nameColor, fieldNumber: 13)
    }
    if self.metaverse != 0 {
      try visitor.visitSingularInt32Field(value: self.metaverse, fieldNumber: 14)
    }
    if self.cloaking != 0 {
      try visitor.visitSingularInt32Field(value: self.cloaking, fieldNumber: 15)
    }
    if self.inhibitNoise != 0 {
      try visitor.visitSingularInt32Field(value: self.inhibitNoise, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STVipNotification, rhs: STVipNotification) -> Bool {
    if lhs.vipID != rhs.vipID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.levelID != rhs.levelID {return false}
    if lhs.levelName != rhs.levelName {return false}
    if lhs.level != rhs.level {return false}
    if lhs.levelIcon != rhs.levelIcon {return false}
    if lhs.levelEffect != rhs.levelEffect {return false}
    if lhs.effectiveTimestamp != rhs.effectiveTimestamp {return false}
    if lhs.expireTimestamp != rhs.expireTimestamp {return false}
    if lhs.guardTimestamp != rhs.guardTimestamp {return false}
    if lhs.type != rhs.type {return false}
    if lhs.fontColor != rhs.fontColor {return false}
    if lhs.nameColor != rhs.nameColor {return false}
    if lhs.metaverse != rhs.metaverse {return false}
    if lhs.cloaking != rhs.cloaking {return false}
    if lhs.inhibitNoise != rhs.inhibitNoise {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STEidolonNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "EidolonNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageType"),
    2: .same(proto: "userId"),
    3: .same(proto: "linkValue"),
    4: .same(proto: "imgUrl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.messageType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.linkValue) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imgURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.messageType != .notset {
      try visitor.visitSingularEnumField(value: self.messageType, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if !self.linkValue.isEmpty {
      try visitor.visitSingularStringField(value: self.linkValue, fieldNumber: 3)
    }
    if !self.imgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imgURL, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STEidolonNotification, rhs: STEidolonNotification) -> Bool {
    if lhs.messageType != rhs.messageType {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.linkValue != rhs.linkValue {return false}
    if lhs.imgURL != rhs.imgURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
