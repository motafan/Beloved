// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*************** 通用枚举 - Start ******************
public enum STGender: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  ///男
  case male // = 1

  ///女
  case female // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .male
    case 2: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .male: return 1
    case .female: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STGender] = [
    .notset,
    .male,
    .female,
  ]

}

public enum STFollowState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  /// 未关注
  case notFollowing // = 1

  /// 已经关注
  case following // = 2

  /// 互相关注
  case followingEachOther // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .notFollowing
    case 2: self = .following
    case 3: self = .followingEachOther
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .notFollowing: return 1
    case .following: return 2
    case .followingEachOther: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STFollowState] = [
    .notset,
    .notFollowing,
    .following,
    .followingEachOther,
  ]

}

public enum STUserBlacklistState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  /// 未拉黑
  case notUserBlacklist // = 1

  /// 已经拉黑
  case userBlacklist // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .notUserBlacklist
    case 2: self = .userBlacklist
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .notUserBlacklist: return 1
    case .userBlacklist: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STUserBlacklistState] = [
    .notset,
    .notUserBlacklist,
    .userBlacklist,
  ]

}

public enum STMessageState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  /// 发送失败
  case error // = 1

  /// 正在发送
  case sending // = 2

  /// 发送成功，服务器已经收到
  case sent // = 3

  /// 已经接收，未读
  case received // = 4

  /// 已读
  case read // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .error
    case 2: self = .sending
    case 3: self = .sent
    case 4: self = .received
    case 5: self = .read
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .error: return 1
    case .sending: return 2
    case .sent: return 3
    case .received: return 4
    case .read: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STMessageState] = [
    .notset,
    .error,
    .sending,
    .sent,
    .received,
    .read,
  ]

}

public enum STMessageReceiptType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  ///消息发送回执
  case receivedPatches // = 1

  ///读用户消息
  case readUser // = 2

  ///消息已读状态送达回执
  case readArriveNotice // = 3

  ///读系统消息
  case readSystem // = 4

  ///读广告
  case readAdvertising // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .receivedPatches
    case 2: self = .readUser
    case 3: self = .readArriveNotice
    case 4: self = .readSystem
    case 5: self = .readAdvertising
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .receivedPatches: return 1
    case .readUser: return 2
    case .readArriveNotice: return 3
    case .readSystem: return 4
    case .readAdvertising: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STMessageReceiptType] = [
    .notset,
    .receivedPatches,
    .readUser,
    .readArriveNotice,
    .readSystem,
    .readAdvertising,
  ]

}

public enum STInteractionMessageType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  /// 动态被评论
  case comment // = 1

  /// 在评论区被@
  case commentAt // = 2

  /// 动态被点赞
  case likeMoment // = 3

  /// 评论被点赞
  case likeComment // = 4

  /// 被关注
  case follow // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .comment
    case 2: self = .commentAt
    case 3: self = .likeMoment
    case 4: self = .likeComment
    case 5: self = .follow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .comment: return 1
    case .commentAt: return 2
    case .likeMoment: return 3
    case .likeComment: return 4
    case .follow: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STInteractionMessageType] = [
    .notset,
    .comment,
    .commentAt,
    .likeMoment,
    .likeComment,
    .follow,
  ]

}

public enum STChatRecordType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  ///历史记录
  case history // = 1

  ///离线消息
  case offlineRecord // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .history
    case 2: self = .offlineRecord
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .history: return 1
    case .offlineRecord: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STChatRecordType] = [
    .notset,
    .history,
    .offlineRecord,
  ]

}

/// 房间模式
public enum STChannelType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unkown // = 0

  /// 娱乐模式 YU_LE
  case yuLe // = 1

  /// 开黑模式 KAI_HEI
  case kaiHei // = 2

  /// 小游戏模式 MINI_GAME
  case miniGame // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unkown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unkown
    case 1: self = .yuLe
    case 2: self = .kaiHei
    case 3: self = .miniGame
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unkown: return 0
    case .yuLe: return 1
    case .kaiHei: return 2
    case .miniGame: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STChannelType] = [
    .unkown,
    .yuLe,
    .kaiHei,
    .miniGame,
  ]

}

/// 操作用户类型
public enum STOperateUserType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case operateUserUnknown // = 0

  /// 设置房管
  case setAsAdministrator // = 1

  /// 取消房管
  case cancelAsAdministrator // = 2

  /// 设置超管
  case setAsSuperAdministrator // = 3

  /// 取消超管
  case cancelAsSuperAdministrator // = 4

  /// 拉黑
  case block // = 5

  /// 取消拉黑
  case unblock // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .operateUserUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .operateUserUnknown
    case 1: self = .setAsAdministrator
    case 2: self = .cancelAsAdministrator
    case 3: self = .setAsSuperAdministrator
    case 4: self = .cancelAsSuperAdministrator
    case 5: self = .block
    case 6: self = .unblock
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .operateUserUnknown: return 0
    case .setAsAdministrator: return 1
    case .cancelAsAdministrator: return 2
    case .setAsSuperAdministrator: return 3
    case .cancelAsSuperAdministrator: return 4
    case .block: return 5
    case .unblock: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STOperateUserType] = [
    .operateUserUnknown,
    .setAsAdministrator,
    .cancelAsAdministrator,
    .setAsSuperAdministrator,
    .cancelAsSuperAdministrator,
    .block,
    .unblock,
  ]

}

/// 移出用户类型
public enum STRemoveUserType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case removeUserUnknown // = 0

  /// 移除被拉黑的用户
  case removeBlock // = 1

  /// 移出被踢出的用户
  case removeKickOut // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .removeUserUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .removeUserUnknown
    case 1: self = .removeBlock
    case 2: self = .removeKickOut
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .removeUserUnknown: return 0
    case .removeBlock: return 1
    case .removeKickOut: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STRemoveUserType] = [
    .removeUserUnknown,
    .removeBlock,
    .removeKickOut,
  ]

}

/// 横幅类型 {
public enum STBannerType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0

  /// 礼物赠送横幅
  case giftBanner // = 1

  /// 勋章升级横幅
  case medalBanner // = 2

  /// 礼物藏馆全服横幅
  case collectBanner // = 3

  /// 其他全服横幅
  case otherBanner // = 100
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .giftBanner
    case 2: self = .medalBanner
    case 3: self = .collectBanner
    case 100: self = .otherBanner
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .giftBanner: return 1
    case .medalBanner: return 2
    case .collectBanner: return 3
    case .otherBanner: return 100
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STBannerType] = [
    .unknown,
    .giftBanner,
    .medalBanner,
    .collectBanner,
    .otherBanner,
  ]

}

///幻灵消息类型
public enum STEidolonMessageType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case notset // = 0

  /// 孵化完成
  case hatchFinish // = 1

  /// 探险完成
  case exploreFinish // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .notset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notset
    case 1: self = .hatchFinish
    case 2: self = .exploreFinish
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notset: return 0
    case .hatchFinish: return 1
    case .exploreFinish: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STEidolonMessageType] = [
    .notset,
    .hatchFinish,
    .exploreFinish,
  ]

}

/// 权限
public enum STPowerType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unknown // = 0

  /// 房主
  case owner // = 1

  /// 超级管理员
  case superAdmin // = 2

  /// 管理员
  case admin // = 3

  /// 普通用户
  case normal // = 4

  /// 公会会长
  case familyOwner // = 5

  /// 黑名单用户
  case blacklist // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .owner
    case 2: self = .superAdmin
    case 3: self = .admin
    case 4: self = .normal
    case 5: self = .familyOwner
    case 6: self = .blacklist
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .owner: return 1
    case .superAdmin: return 2
    case .admin: return 3
    case .normal: return 4
    case .familyOwner: return 5
    case .blacklist: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [STPowerType] = [
    .unknown,
    .owner,
    .superAdmin,
    .admin,
    .normal,
    .familyOwner,
    .blacklist,
  ]

}

/// 空结构，方便拓展
public struct STNone: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 通用用户信息
public struct STUserInCommon: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户ID
  public var userID: String = String()

  /// 账号ID
  public var accountID: Int64 = 0

  /// 性别
  public var gender: STGender = .notset

  /// 昵称
  public var nickname: String = String()

  /// 头像
  public var avatarURL: String = String()

  /// 生日
  public var birthday: String = String()

  /// 签名
  public var signature: String = String()

  /// 是否已经关注
  public var followState: STFollowState = .notset

  /// 是否已经拉黑
  public var blacklistState: STUserBlacklistState = .notset

  ///备注昵称
  public var noteNickname: String = String()

  ///bool send_message_status = 11; //发送消息状态 true-允许,false-禁止
  public var doNotDisturb: Bool = false

  /// 当前所在频道
  public var currentChannel: STCurrentChannel {
    get {return _currentChannel ?? STCurrentChannel()}
    set {_currentChannel = newValue}
  }
  /// Returns true if `currentChannel` has been explicitly set.
  public var hasCurrentChannel: Bool {return self._currentChannel != nil}
  /// Clears the value of `currentChannel`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentChannel() {self._currentChannel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _currentChannel: STCurrentChannel? = nil
}

public struct STCurrentChannel: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 当前所在频道
  public var currentChannelID: String = String()

  /// true-已锁 false-未锁
  public var lockedStatus: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 房间信息
public struct STChannelVo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 房间号,展示用
  public var channelNo: Int32 {
    get {return _storage._channelNo}
    set {_uniqueStorage()._channelNo = newValue}
  }

  /// 房间系统id
  public var channelID: String {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  /// 名称
  public var channelName: String {
    get {return _storage._channelName}
    set {_uniqueStorage()._channelName = newValue}
  }

  /// 头像
  public var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  /// 房间类型
  public var channelType: STChannelType {
    get {return _storage._channelType}
    set {_uniqueStorage()._channelType = newValue}
  }

  /// 房主id
  public var ownerID: String {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  /// 状态
  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 在线人数
  public var onlineNumber: Int32 {
    get {return _storage._onlineNumber}
    set {_uniqueStorage()._onlineNumber = newValue}
  }

  /// 假人人数
  public var falseOnlineNumber: Int32 {
    get {return _storage._falseOnlineNumber}
    set {_uniqueStorage()._falseOnlineNumber = newValue}
  }

  /// 上锁状态,0:未上锁 1:上锁
  public var lockedStatus: Int32 {
    get {return _storage._lockedStatus}
    set {_uniqueStorage()._lockedStatus = newValue}
  }

  /// 欢迎语
  public var welcomingSpeech: String {
    get {return _storage._welcomingSpeech}
    set {_uniqueStorage()._welcomingSpeech = newValue}
  }

  /// 公屏开启状态,0:未开启 1:开启
  public var publicScreenStatus: Int32 {
    get {return _storage._publicScreenStatus}
    set {_uniqueStorage()._publicScreenStatus = newValue}
  }

  /// 房主账号id,展示用
  public var ownerAccountid: Int32 {
    get {return _storage._ownerAccountid}
    set {_uniqueStorage()._ownerAccountid = newValue}
  }

  /// 标签集合
  public var labels: String {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// 房主昵称
  public var ownerNickname: String {
    get {return _storage._ownerNickname}
    set {_uniqueStorage()._ownerNickname = newValue}
  }

  /// 背景图
  public var coverURL: String {
    get {return _storage._coverURL}
    set {_uniqueStorage()._coverURL = newValue}
  }

  /// 展示数
  public var displayNumber: Int32 {
    get {return _storage._displayNumber}
    set {_uniqueStorage()._displayNumber = newValue}
  }

  /// 标签名
  public var labelName: String {
    get {return _storage._labelName}
    set {_uniqueStorage()._labelName = newValue}
  }

  /// 房主位锁状态(锁)（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat0Status: Int32 {
    get {return _storage._seat0Status}
    set {_uniqueStorage()._seat0Status = newValue}
  }

  /// 1号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat1Status: Int32 {
    get {return _storage._seat1Status}
    set {_uniqueStorage()._seat1Status = newValue}
  }

  /// 2号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat2Status: Int32 {
    get {return _storage._seat2Status}
    set {_uniqueStorage()._seat2Status = newValue}
  }

  /// 3号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat3Status: Int32 {
    get {return _storage._seat3Status}
    set {_uniqueStorage()._seat3Status = newValue}
  }

  /// 4号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat4Status: Int32 {
    get {return _storage._seat4Status}
    set {_uniqueStorage()._seat4Status = newValue}
  }

  /// 5号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat5Status: Int32 {
    get {return _storage._seat5Status}
    set {_uniqueStorage()._seat5Status = newValue}
  }

  /// 6号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat6Status: Int32 {
    get {return _storage._seat6Status}
    set {_uniqueStorage()._seat6Status = newValue}
  }

  /// 7号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat7Status: Int32 {
    get {return _storage._seat7Status}
    set {_uniqueStorage()._seat7Status = newValue}
  }

  /// 8号麦位锁状态（0上锁 1解锁/开麦 2闭麦 3锁麦并闭麦）
  public var seat8Status: Int32 {
    get {return _storage._seat8Status}
    set {_uniqueStorage()._seat8Status = newValue}
  }

  /// 创建时间
  public var createTime: String {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  /// 更新时间
  public var updateTime: String {
    get {return _storage._updateTime}
    set {_uniqueStorage()._updateTime = newValue}
  }

  /// 房间密码
  public var channelPwd: String {
    get {return _storage._channelPwd}
    set {_uniqueStorage()._channelPwd = newValue}
  }

  /// 小游戏模式下, H5页面默认背景url
  public var gameH5BgURL: String {
    get {return _storage._gameH5BgURL}
    set {_uniqueStorage()._gameH5BgURL = newValue}
  }

  /// 小游戏模式下, H5页面url
  public var gameH5IndexURL: String {
    get {return _storage._gameH5IndexURL}
    set {_uniqueStorage()._gameH5IndexURL = newValue}
  }

  ///菜单唯一值
  public var uniCode: String {
    get {return _storage._uniCode}
    set {_uniqueStorage()._uniCode = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 房间设置信息
public struct STChannelSettingVo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 公告标题
  public var announceTitle: String = String()

  /// 公告内容
  public var announceContent: String = String()

  /// 心动值开关 0关 1开
  public var lovenumSwitch: Int32 = 0

  /// 麦位布局 1:横向排列(传统布局) 2:纵向排列(聊天模式)
  public var seatLayout: Int32 = 0

  /// 背景Id
  public var coverID: Int32 = 0

  /// 房间第10个座位是否显示0隐藏1显示
  public var seat9Show: Int32 = 0

  /// 房间模式座位展示数量（1-10）
  public var seatCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 房间其他配置信息
public struct STChannelOtherVo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///直播开关 0关 1开（个播房返回）
  public var liveSwitch: Int32 = 0

  ///观众席开关 0关 1开（个播房返回）
  public var seatsSwitch: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 麦位用户信息
public struct STUserInSeats: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 房间id
  public var channelID: String {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  /// 用户系统id
  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  /// 账号id
  public var accountID: Int32 {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  /// 昵称
  public var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  /// 头像
  public var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  /// 性别 1男2女
  public var gender: STGender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  /// 麦位号 0-8
  public var seat: Int32 {
    get {return _storage._seat}
    set {_uniqueStorage()._seat = newValue}
  }

  /// 心动值
  public var lovenum: Int64 {
    get {return _storage._lovenum}
    set {_uniqueStorage()._lovenum = newValue}
  }

  /// 允许发言(用户是否能说话)
  public var allowToSpeak: Int32 {
    get {return _storage._allowToSpeak}
    set {_uniqueStorage()._allowToSpeak = newValue}
  }

  /// 允许打字(用户是否能公屏打字)
  public var allowToType: Int32 {
    get {return _storage._allowToType}
    set {_uniqueStorage()._allowToType = newValue}
  }

  /// 角色
  public var powerType: STPowerType {
    get {return _storage._powerType}
    set {_uniqueStorage()._powerType = newValue}
  }

  /// 房间外部管理角色权限（0.没权限 1.签约厅家族长 2.普通家族长）
  public var channelPowerType: Int32 {
    get {return _storage._channelPowerType}
    set {_uniqueStorage()._channelPowerType = newValue}
  }

  /// 是否机器人
  public var robot: Int32 {
    get {return _storage._robot}
    set {_uniqueStorage()._robot = newValue}
  }

  /// 状态
  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 装扮信息
  public var dressUpInfo: STDressUpInfo {
    get {return _storage._dressUpInfo ?? STDressUpInfo()}
    set {_uniqueStorage()._dressUpInfo = newValue}
  }
  /// Returns true if `dressUpInfo` has been explicitly set.
  public var hasDressUpInfo: Bool {return _storage._dressUpInfo != nil}
  /// Clears the value of `dressUpInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDressUpInfo() {_uniqueStorage()._dressUpInfo = nil}

  /// 贵宾卡信息
  public var honouredGuestCard: STHonouredGuestCard {
    get {return _storage._honouredGuestCard ?? STHonouredGuestCard()}
    set {_uniqueStorage()._honouredGuestCard = newValue}
  }
  /// Returns true if `honouredGuestCard` has been explicitly set.
  public var hasHonouredGuestCard: Bool {return _storage._honouredGuestCard != nil}
  /// Clears the value of `honouredGuestCard`. Subsequent reads from it will return its default value.
  public mutating func clearHonouredGuestCard() {_uniqueStorage()._honouredGuestCard = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 挂件信息
public struct STDressUpInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 展示顺序
  public var weight: Int32 = 0

  /// 父级展示顺序
  public var parentWeight: Int32 = 0

  /// 等级
  public var level: Int32 = 0

  /// 装扮ID
  public var dressID: Int32 = 0

  /// 装扮name
  public var dressName: String = String()

  /// 装扮iconUrl
  public var dressIcon: String = String()

  /// 装扮iconSvgaUrl
  public var dressIconSvga: String = String()

  /// 效果url
  public var effectURL: String = String()

  /// 获取方法说明
  public var approach: String = String()

  /// 资料卡装饰
  public var cardDecoration: [String] = []

  /// 主页装饰动画
  public var homeDecoration: [String] = []

  /// 尾灯
  public var taillightURL: String = String()

  /// 账号标签信息
  public var accountLabel: [STAccountLabel] = []

  /// 靓号标识,0：没有靓号, 1：存在靓号
  public var prettyAccount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 账号标签信息
public struct STAccountLabel: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标签名称
  public var labelName: String = String()

  /// 标签图片地址
  public var labelURL: String = String()

  /// // 标签图片地址
  public var labelURL2: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 贵宾卡信息
public struct STHonouredGuestCard: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 贵宾卡Id
  public var cardID: Int64 {
    get {return _storage._cardID}
    set {_uniqueStorage()._cardID = newValue}
  }

  /// 贵宾卡等级Id
  public var levelID: Int64 {
    get {return _storage._levelID}
    set {_uniqueStorage()._levelID = newValue}
  }

  /// 贵宾卡名称
  public var cardName: String {
    get {return _storage._cardName}
    set {_uniqueStorage()._cardName = newValue}
  }

  /// 贵宾卡标志
  public var cardIcon: String {
    get {return _storage._cardIcon}
    set {_uniqueStorage()._cardIcon = newValue}
  }

  /// 数量
  public var cardCount: Int32 {
    get {return _storage._cardCount}
    set {_uniqueStorage()._cardCount = newValue}
  }

  /// 贵宾卡背景样式
  public var backdropURL: String {
    get {return _storage._backdropURL}
    set {_uniqueStorage()._backdropURL = newValue}
  }

  /// 公屏提示样式
  public var promptURL: String {
    get {return _storage._promptURL}
    set {_uniqueStorage()._promptURL = newValue}
  }

  /// 字体颜色
  public var fontColor: String {
    get {return _storage._fontColor}
    set {_uniqueStorage()._fontColor = newValue}
  }

  /// 贵宾卡图标
  public var honouredGestURL: String {
    get {return _storage._honouredGestURL}
    set {_uniqueStorage()._honouredGestURL = newValue}
  }

  /// 房间号
  public var channelNo: Int32 {
    get {return _storage._channelNo}
    set {_uniqueStorage()._channelNo = newValue}
  }

  /// 房间名称
  public var channelName: String {
    get {return _storage._channelName}
    set {_uniqueStorage()._channelName = newValue}
  }

  /// 房间封面
  public var avatarURL: String {
    get {return _storage._avatarURL}
    set {_uniqueStorage()._avatarURL = newValue}
  }

  /// 房间id
  public var channelID: String {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  /// 财富值
  public var wealthValue: Int64 {
    get {return _storage._wealthValue}
    set {_uniqueStorage()._wealthValue = newValue}
  }

  /// 保级值
  public var protectionValue: Int64 {
    get {return _storage._protectionValue}
    set {_uniqueStorage()._protectionValue = newValue}
  }

  /// 贵宾卡等级更新时间戳
  public var levelUpdateTime: Int64 {
    get {return _storage._levelUpdateTime}
    set {_uniqueStorage()._levelUpdateTime = newValue}
  }

  /// 当前系统时间戳
  public var systemTime: Int64 {
    get {return _storage._systemTime}
    set {_uniqueStorage()._systemTime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 礼物前三用户
public struct STGiftTopUser: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: String = String()

  public var nickname: String = String()

  public var avatarURL: String = String()

  public var finish: Int32 = 0

  public var giftValue: Int32 = 0

  public var maxLimitValue: Int32 = 0

  public var wishSwitch: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 麦位列表信息
public struct STUserInSeatVo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 麦位列表
  public var userInSeats: [STUserInSeats] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension STGender: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Gender_NOTSET"),
    1: .same(proto: "Male"),
    2: .same(proto: "Female"),
  ]
}

extension STFollowState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FollowState_NOTSET"),
    1: .same(proto: "NotFollowing"),
    2: .same(proto: "Following"),
    3: .same(proto: "FollowingEachOther"),
  ]
}

extension STUserBlacklistState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UserBlacklistState_NOTSET"),
    1: .same(proto: "NotUserBlacklist"),
    2: .same(proto: "UserBlacklist"),
  ]
}

extension STMessageState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MessageState_NOTSET"),
    1: .same(proto: "Error"),
    2: .same(proto: "Sending"),
    3: .same(proto: "Sent"),
    4: .same(proto: "Received"),
    5: .same(proto: "Read"),
  ]
}

extension STMessageReceiptType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MessageReceiptType_NOTSET"),
    1: .same(proto: "RECEIVED_PATCHES"),
    2: .same(proto: "READ_USER"),
    3: .same(proto: "READ_ARRIVE_NOTICE"),
    4: .same(proto: "READ_SYSTEM"),
    5: .same(proto: "READ_ADVERTISING"),
  ]
}

extension STInteractionMessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InteractionMessageType_NOTSET"),
    1: .same(proto: "Comment"),
    2: .same(proto: "CommentAt"),
    3: .same(proto: "LikeMoment"),
    4: .same(proto: "LikeComment"),
    5: .same(proto: "Follow"),
  ]
}

extension STChatRecordType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ChatRecordType_NOTSET"),
    1: .same(proto: "HISTORY"),
    2: .same(proto: "OFFLINE_RECORD"),
  ]
}

extension STChannelType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHANNELTYPE_UNKOWN"),
    1: .same(proto: "YU_LE"),
    2: .same(proto: "KAI_HEI"),
    3: .same(proto: "MINI_GAME"),
  ]
}

extension STOperateUserType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATE_USER_UNKNOWN"),
    1: .same(proto: "SET_AS_ADMINISTRATOR"),
    2: .same(proto: "CANCEL_AS_ADMINISTRATOR"),
    3: .same(proto: "SET_AS_SUPER_ADMINISTRATOR"),
    4: .same(proto: "CANCEL_AS_SUPER_ADMINISTRATOR"),
    5: .same(proto: "BLOCK"),
    6: .same(proto: "UNBLOCK"),
  ]
}

extension STRemoveUserType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REMOVE_USER_UNKNOWN"),
    1: .same(proto: "REMOVE_BLOCK"),
    2: .same(proto: "REMOVE_KICK_OUT"),
  ]
}

extension STBannerType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BANNER_TYPE_UNKNOWN"),
    1: .same(proto: "GIFT_BANNER"),
    2: .same(proto: "MEDAL_BANNER"),
    3: .same(proto: "COLLECT_BANNER"),
    100: .same(proto: "OTHER_BANNER"),
  ]
}

extension STEidolonMessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EidolonMessageType_NOTSET"),
    1: .same(proto: "HATCH_FINISH"),
    2: .same(proto: "EXPLORE_FINISH"),
  ]
}

extension STPowerType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POWERTYPE_UNKNOWN"),
    1: .same(proto: "OWNER"),
    2: .same(proto: "SUPER_ADMIN"),
    3: .same(proto: "ADMIN"),
    4: .same(proto: "NORMAL"),
    5: .same(proto: "FAMILY_OWNER"),
    6: .same(proto: "BLACKLIST"),
  ]
}

extension STNone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "None"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STNone, rhs: STNone) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STUserInCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UserInCommon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "gender"),
    4: .same(proto: "nickname"),
    5: .standard(proto: "avatar_url"),
    6: .same(proto: "birthday"),
    7: .same(proto: "signature"),
    8: .standard(proto: "follow_state"),
    9: .standard(proto: "blacklist_state"),
    10: .standard(proto: "note_nickname"),
    12: .standard(proto: "do_not_disturb"),
    20: .standard(proto: "current_channel"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.accountID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.avatarURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.birthday) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.signature) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.followState) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.blacklistState) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.noteNickname) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.doNotDisturb) }()
      case 20: try { try decoder.decodeSingularMessageField(value: &self._currentChannel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt64Field(value: self.accountID, fieldNumber: 2)
    }
    if self.gender != .notset {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 3)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 4)
    }
    if !self.avatarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarURL, fieldNumber: 5)
    }
    if !self.birthday.isEmpty {
      try visitor.visitSingularStringField(value: self.birthday, fieldNumber: 6)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 7)
    }
    if self.followState != .notset {
      try visitor.visitSingularEnumField(value: self.followState, fieldNumber: 8)
    }
    if self.blacklistState != .notset {
      try visitor.visitSingularEnumField(value: self.blacklistState, fieldNumber: 9)
    }
    if !self.noteNickname.isEmpty {
      try visitor.visitSingularStringField(value: self.noteNickname, fieldNumber: 10)
    }
    if self.doNotDisturb != false {
      try visitor.visitSingularBoolField(value: self.doNotDisturb, fieldNumber: 12)
    }
    try { if let v = self._currentChannel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STUserInCommon, rhs: STUserInCommon) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.avatarURL != rhs.avatarURL {return false}
    if lhs.birthday != rhs.birthday {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.followState != rhs.followState {return false}
    if lhs.blacklistState != rhs.blacklistState {return false}
    if lhs.noteNickname != rhs.noteNickname {return false}
    if lhs.doNotDisturb != rhs.doNotDisturb {return false}
    if lhs._currentChannel != rhs._currentChannel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STCurrentChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CurrentChannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_channel_id"),
    6: .same(proto: "lockedStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.currentChannelID) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.lockedStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currentChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.currentChannelID, fieldNumber: 1)
    }
    if self.lockedStatus != false {
      try visitor.visitSingularBoolField(value: self.lockedStatus, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STCurrentChannel, rhs: STCurrentChannel) -> Bool {
    if lhs.currentChannelID != rhs.currentChannelID {return false}
    if lhs.lockedStatus != rhs.lockedStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STChannelVo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChannelVo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channelNo"),
    2: .same(proto: "channelId"),
    3: .same(proto: "channelName"),
    4: .same(proto: "avatarUrl"),
    5: .same(proto: "channelType"),
    6: .same(proto: "ownerId"),
    7: .same(proto: "status"),
    8: .same(proto: "onlineNumber"),
    9: .same(proto: "falseOnlineNumber"),
    10: .same(proto: "lockedStatus"),
    11: .same(proto: "welcomingSpeech"),
    12: .same(proto: "publicScreenStatus"),
    13: .same(proto: "ownerAccountid"),
    14: .same(proto: "labels"),
    15: .same(proto: "ownerNickname"),
    16: .same(proto: "coverUrl"),
    17: .same(proto: "displayNumber"),
    18: .same(proto: "labelName"),
    19: .same(proto: "seat0Status"),
    20: .same(proto: "seat1Status"),
    21: .same(proto: "seat2Status"),
    22: .same(proto: "seat3Status"),
    23: .same(proto: "seat4Status"),
    24: .same(proto: "seat5Status"),
    25: .same(proto: "seat6Status"),
    26: .same(proto: "seat7Status"),
    27: .same(proto: "seat8Status"),
    28: .same(proto: "createTime"),
    29: .same(proto: "updateTime"),
    30: .same(proto: "channelPwd"),
    31: .same(proto: "gameH5BgUrl"),
    32: .same(proto: "gameH5IndexUrl"),
    33: .same(proto: "uniCode"),
  ]

  fileprivate class _StorageClass {
    var _channelNo: Int32 = 0
    var _channelID: String = String()
    var _channelName: String = String()
    var _avatarURL: String = String()
    var _channelType: STChannelType = .unkown
    var _ownerID: String = String()
    var _status: Int32 = 0
    var _onlineNumber: Int32 = 0
    var _falseOnlineNumber: Int32 = 0
    var _lockedStatus: Int32 = 0
    var _welcomingSpeech: String = String()
    var _publicScreenStatus: Int32 = 0
    var _ownerAccountid: Int32 = 0
    var _labels: String = String()
    var _ownerNickname: String = String()
    var _coverURL: String = String()
    var _displayNumber: Int32 = 0
    var _labelName: String = String()
    var _seat0Status: Int32 = 0
    var _seat1Status: Int32 = 0
    var _seat2Status: Int32 = 0
    var _seat3Status: Int32 = 0
    var _seat4Status: Int32 = 0
    var _seat5Status: Int32 = 0
    var _seat6Status: Int32 = 0
    var _seat7Status: Int32 = 0
    var _seat8Status: Int32 = 0
    var _createTime: String = String()
    var _updateTime: String = String()
    var _channelPwd: String = String()
    var _gameH5BgURL: String = String()
    var _gameH5IndexURL: String = String()
    var _uniCode: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _channelNo = source._channelNo
      _channelID = source._channelID
      _channelName = source._channelName
      _avatarURL = source._avatarURL
      _channelType = source._channelType
      _ownerID = source._ownerID
      _status = source._status
      _onlineNumber = source._onlineNumber
      _falseOnlineNumber = source._falseOnlineNumber
      _lockedStatus = source._lockedStatus
      _welcomingSpeech = source._welcomingSpeech
      _publicScreenStatus = source._publicScreenStatus
      _ownerAccountid = source._ownerAccountid
      _labels = source._labels
      _ownerNickname = source._ownerNickname
      _coverURL = source._coverURL
      _displayNumber = source._displayNumber
      _labelName = source._labelName
      _seat0Status = source._seat0Status
      _seat1Status = source._seat1Status
      _seat2Status = source._seat2Status
      _seat3Status = source._seat3Status
      _seat4Status = source._seat4Status
      _seat5Status = source._seat5Status
      _seat6Status = source._seat6Status
      _seat7Status = source._seat7Status
      _seat8Status = source._seat8Status
      _createTime = source._createTime
      _updateTime = source._updateTime
      _channelPwd = source._channelPwd
      _gameH5BgURL = source._gameH5BgURL
      _gameH5IndexURL = source._gameH5IndexURL
      _uniCode = source._uniCode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._channelNo) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._channelID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._channelName) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._avatarURL) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._channelType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._ownerID) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._onlineNumber) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._falseOnlineNumber) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._lockedStatus) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._welcomingSpeech) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._publicScreenStatus) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._ownerAccountid) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._labels) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._ownerNickname) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._coverURL) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._displayNumber) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._labelName) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._seat0Status) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._seat1Status) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._seat2Status) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._seat3Status) }()
        case 23: try { try decoder.decodeSingularInt32Field(value: &_storage._seat4Status) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._seat5Status) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._seat6Status) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._seat7Status) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._seat8Status) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._createTime) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._updateTime) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._channelPwd) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._gameH5BgURL) }()
        case 32: try { try decoder.decodeSingularStringField(value: &_storage._gameH5IndexURL) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._uniCode) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._channelNo != 0 {
        try visitor.visitSingularInt32Field(value: _storage._channelNo, fieldNumber: 1)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelID, fieldNumber: 2)
      }
      if !_storage._channelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelName, fieldNumber: 3)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 4)
      }
      if _storage._channelType != .unkown {
        try visitor.visitSingularEnumField(value: _storage._channelType, fieldNumber: 5)
      }
      if !_storage._ownerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerID, fieldNumber: 6)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 7)
      }
      if _storage._onlineNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._onlineNumber, fieldNumber: 8)
      }
      if _storage._falseOnlineNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._falseOnlineNumber, fieldNumber: 9)
      }
      if _storage._lockedStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lockedStatus, fieldNumber: 10)
      }
      if !_storage._welcomingSpeech.isEmpty {
        try visitor.visitSingularStringField(value: _storage._welcomingSpeech, fieldNumber: 11)
      }
      if _storage._publicScreenStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._publicScreenStatus, fieldNumber: 12)
      }
      if _storage._ownerAccountid != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ownerAccountid, fieldNumber: 13)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitSingularStringField(value: _storage._labels, fieldNumber: 14)
      }
      if !_storage._ownerNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerNickname, fieldNumber: 15)
      }
      if !_storage._coverURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverURL, fieldNumber: 16)
      }
      if _storage._displayNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._displayNumber, fieldNumber: 17)
      }
      if !_storage._labelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._labelName, fieldNumber: 18)
      }
      if _storage._seat0Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat0Status, fieldNumber: 19)
      }
      if _storage._seat1Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat1Status, fieldNumber: 20)
      }
      if _storage._seat2Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat2Status, fieldNumber: 21)
      }
      if _storage._seat3Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat3Status, fieldNumber: 22)
      }
      if _storage._seat4Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat4Status, fieldNumber: 23)
      }
      if _storage._seat5Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat5Status, fieldNumber: 24)
      }
      if _storage._seat6Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat6Status, fieldNumber: 25)
      }
      if _storage._seat7Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat7Status, fieldNumber: 26)
      }
      if _storage._seat8Status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat8Status, fieldNumber: 27)
      }
      if !_storage._createTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createTime, fieldNumber: 28)
      }
      if !_storage._updateTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updateTime, fieldNumber: 29)
      }
      if !_storage._channelPwd.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelPwd, fieldNumber: 30)
      }
      if !_storage._gameH5BgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gameH5BgURL, fieldNumber: 31)
      }
      if !_storage._gameH5IndexURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gameH5IndexURL, fieldNumber: 32)
      }
      if !_storage._uniCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uniCode, fieldNumber: 33)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STChannelVo, rhs: STChannelVo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._channelNo != rhs_storage._channelNo {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._channelName != rhs_storage._channelName {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._channelType != rhs_storage._channelType {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._onlineNumber != rhs_storage._onlineNumber {return false}
        if _storage._falseOnlineNumber != rhs_storage._falseOnlineNumber {return false}
        if _storage._lockedStatus != rhs_storage._lockedStatus {return false}
        if _storage._welcomingSpeech != rhs_storage._welcomingSpeech {return false}
        if _storage._publicScreenStatus != rhs_storage._publicScreenStatus {return false}
        if _storage._ownerAccountid != rhs_storage._ownerAccountid {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._ownerNickname != rhs_storage._ownerNickname {return false}
        if _storage._coverURL != rhs_storage._coverURL {return false}
        if _storage._displayNumber != rhs_storage._displayNumber {return false}
        if _storage._labelName != rhs_storage._labelName {return false}
        if _storage._seat0Status != rhs_storage._seat0Status {return false}
        if _storage._seat1Status != rhs_storage._seat1Status {return false}
        if _storage._seat2Status != rhs_storage._seat2Status {return false}
        if _storage._seat3Status != rhs_storage._seat3Status {return false}
        if _storage._seat4Status != rhs_storage._seat4Status {return false}
        if _storage._seat5Status != rhs_storage._seat5Status {return false}
        if _storage._seat6Status != rhs_storage._seat6Status {return false}
        if _storage._seat7Status != rhs_storage._seat7Status {return false}
        if _storage._seat8Status != rhs_storage._seat8Status {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._channelPwd != rhs_storage._channelPwd {return false}
        if _storage._gameH5BgURL != rhs_storage._gameH5BgURL {return false}
        if _storage._gameH5IndexURL != rhs_storage._gameH5IndexURL {return false}
        if _storage._uniCode != rhs_storage._uniCode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STChannelSettingVo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChannelSettingVo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "announceTitle"),
    2: .same(proto: "announceContent"),
    3: .same(proto: "lovenumSwitch"),
    4: .same(proto: "seatLayout"),
    5: .same(proto: "coverId"),
    6: .same(proto: "seat9Show"),
    7: .same(proto: "seatCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.announceTitle) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.announceContent) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.lovenumSwitch) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.seatLayout) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.coverID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.seat9Show) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.seatCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.announceTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.announceTitle, fieldNumber: 1)
    }
    if !self.announceContent.isEmpty {
      try visitor.visitSingularStringField(value: self.announceContent, fieldNumber: 2)
    }
    if self.lovenumSwitch != 0 {
      try visitor.visitSingularInt32Field(value: self.lovenumSwitch, fieldNumber: 3)
    }
    if self.seatLayout != 0 {
      try visitor.visitSingularInt32Field(value: self.seatLayout, fieldNumber: 4)
    }
    if self.coverID != 0 {
      try visitor.visitSingularInt32Field(value: self.coverID, fieldNumber: 5)
    }
    if self.seat9Show != 0 {
      try visitor.visitSingularInt32Field(value: self.seat9Show, fieldNumber: 6)
    }
    if self.seatCount != 0 {
      try visitor.visitSingularInt32Field(value: self.seatCount, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STChannelSettingVo, rhs: STChannelSettingVo) -> Bool {
    if lhs.announceTitle != rhs.announceTitle {return false}
    if lhs.announceContent != rhs.announceContent {return false}
    if lhs.lovenumSwitch != rhs.lovenumSwitch {return false}
    if lhs.seatLayout != rhs.seatLayout {return false}
    if lhs.coverID != rhs.coverID {return false}
    if lhs.seat9Show != rhs.seat9Show {return false}
    if lhs.seatCount != rhs.seatCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STChannelOtherVo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChannelOtherVo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "liveSwitch"),
    2: .same(proto: "seatsSwitch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.liveSwitch) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.seatsSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.liveSwitch != 0 {
      try visitor.visitSingularInt32Field(value: self.liveSwitch, fieldNumber: 1)
    }
    if self.seatsSwitch != 0 {
      try visitor.visitSingularInt32Field(value: self.seatsSwitch, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STChannelOtherVo, rhs: STChannelOtherVo) -> Bool {
    if lhs.liveSwitch != rhs.liveSwitch {return false}
    if lhs.seatsSwitch != rhs.seatsSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STUserInSeats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UserInSeats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channelId"),
    2: .same(proto: "userId"),
    3: .same(proto: "accountId"),
    4: .same(proto: "nickname"),
    5: .same(proto: "avatarUrl"),
    6: .same(proto: "gender"),
    7: .same(proto: "seat"),
    8: .same(proto: "lovenum"),
    9: .same(proto: "allowToSpeak"),
    10: .same(proto: "allowToType"),
    11: .same(proto: "powerType"),
    12: .same(proto: "channelPowerType"),
    13: .same(proto: "robot"),
    14: .same(proto: "status"),
    15: .same(proto: "dressUpInfo"),
    16: .same(proto: "honouredGuestCard"),
  ]

  fileprivate class _StorageClass {
    var _channelID: String = String()
    var _userID: String = String()
    var _accountID: Int32 = 0
    var _nickname: String = String()
    var _avatarURL: String = String()
    var _gender: STGender = .notset
    var _seat: Int32 = 0
    var _lovenum: Int64 = 0
    var _allowToSpeak: Int32 = 0
    var _allowToType: Int32 = 0
    var _powerType: STPowerType = .unknown
    var _channelPowerType: Int32 = 0
    var _robot: Int32 = 0
    var _status: Int32 = 0
    var _dressUpInfo: STDressUpInfo? = nil
    var _honouredGuestCard: STHonouredGuestCard? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _channelID = source._channelID
      _userID = source._userID
      _accountID = source._accountID
      _nickname = source._nickname
      _avatarURL = source._avatarURL
      _gender = source._gender
      _seat = source._seat
      _lovenum = source._lovenum
      _allowToSpeak = source._allowToSpeak
      _allowToType = source._allowToType
      _powerType = source._powerType
      _channelPowerType = source._channelPowerType
      _robot = source._robot
      _status = source._status
      _dressUpInfo = source._dressUpInfo
      _honouredGuestCard = source._honouredGuestCard
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._channelID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._accountID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._avatarURL) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._gender) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._seat) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._lovenum) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._allowToSpeak) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._allowToType) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._powerType) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._channelPowerType) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._robot) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._dressUpInfo) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._honouredGuestCard) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelID, fieldNumber: 1)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 2)
      }
      if _storage._accountID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._accountID, fieldNumber: 3)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 4)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 5)
      }
      if _storage._gender != .notset {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 6)
      }
      if _storage._seat != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seat, fieldNumber: 7)
      }
      if _storage._lovenum != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lovenum, fieldNumber: 8)
      }
      if _storage._allowToSpeak != 0 {
        try visitor.visitSingularInt32Field(value: _storage._allowToSpeak, fieldNumber: 9)
      }
      if _storage._allowToType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._allowToType, fieldNumber: 10)
      }
      if _storage._powerType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._powerType, fieldNumber: 11)
      }
      if _storage._channelPowerType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._channelPowerType, fieldNumber: 12)
      }
      if _storage._robot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._robot, fieldNumber: 13)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 14)
      }
      try { if let v = _storage._dressUpInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._honouredGuestCard {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STUserInSeats, rhs: STUserInSeats) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._seat != rhs_storage._seat {return false}
        if _storage._lovenum != rhs_storage._lovenum {return false}
        if _storage._allowToSpeak != rhs_storage._allowToSpeak {return false}
        if _storage._allowToType != rhs_storage._allowToType {return false}
        if _storage._powerType != rhs_storage._powerType {return false}
        if _storage._channelPowerType != rhs_storage._channelPowerType {return false}
        if _storage._robot != rhs_storage._robot {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._dressUpInfo != rhs_storage._dressUpInfo {return false}
        if _storage._honouredGuestCard != rhs_storage._honouredGuestCard {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STDressUpInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DressUpInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weight"),
    2: .same(proto: "parentWeight"),
    3: .same(proto: "level"),
    4: .same(proto: "dressId"),
    5: .same(proto: "dressName"),
    6: .same(proto: "dressIcon"),
    7: .same(proto: "dressIconSvga"),
    8: .same(proto: "effectUrl"),
    9: .same(proto: "approach"),
    10: .same(proto: "cardDecoration"),
    11: .same(proto: "homeDecoration"),
    12: .same(proto: "taillightUrl"),
    13: .same(proto: "accountLabel"),
    14: .same(proto: "prettyAccount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.weight) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.parentWeight) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.level) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.dressID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dressName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dressIcon) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.dressIconSvga) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.effectURL) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.approach) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.cardDecoration) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.homeDecoration) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.taillightURL) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.accountLabel) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self.prettyAccount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.weight != 0 {
      try visitor.visitSingularInt32Field(value: self.weight, fieldNumber: 1)
    }
    if self.parentWeight != 0 {
      try visitor.visitSingularInt32Field(value: self.parentWeight, fieldNumber: 2)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 3)
    }
    if self.dressID != 0 {
      try visitor.visitSingularInt32Field(value: self.dressID, fieldNumber: 4)
    }
    if !self.dressName.isEmpty {
      try visitor.visitSingularStringField(value: self.dressName, fieldNumber: 5)
    }
    if !self.dressIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.dressIcon, fieldNumber: 6)
    }
    if !self.dressIconSvga.isEmpty {
      try visitor.visitSingularStringField(value: self.dressIconSvga, fieldNumber: 7)
    }
    if !self.effectURL.isEmpty {
      try visitor.visitSingularStringField(value: self.effectURL, fieldNumber: 8)
    }
    if !self.approach.isEmpty {
      try visitor.visitSingularStringField(value: self.approach, fieldNumber: 9)
    }
    if !self.cardDecoration.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cardDecoration, fieldNumber: 10)
    }
    if !self.homeDecoration.isEmpty {
      try visitor.visitRepeatedStringField(value: self.homeDecoration, fieldNumber: 11)
    }
    if !self.taillightURL.isEmpty {
      try visitor.visitSingularStringField(value: self.taillightURL, fieldNumber: 12)
    }
    if !self.accountLabel.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accountLabel, fieldNumber: 13)
    }
    if self.prettyAccount != 0 {
      try visitor.visitSingularInt32Field(value: self.prettyAccount, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STDressUpInfo, rhs: STDressUpInfo) -> Bool {
    if lhs.weight != rhs.weight {return false}
    if lhs.parentWeight != rhs.parentWeight {return false}
    if lhs.level != rhs.level {return false}
    if lhs.dressID != rhs.dressID {return false}
    if lhs.dressName != rhs.dressName {return false}
    if lhs.dressIcon != rhs.dressIcon {return false}
    if lhs.dressIconSvga != rhs.dressIconSvga {return false}
    if lhs.effectURL != rhs.effectURL {return false}
    if lhs.approach != rhs.approach {return false}
    if lhs.cardDecoration != rhs.cardDecoration {return false}
    if lhs.homeDecoration != rhs.homeDecoration {return false}
    if lhs.taillightURL != rhs.taillightURL {return false}
    if lhs.accountLabel != rhs.accountLabel {return false}
    if lhs.prettyAccount != rhs.prettyAccount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STAccountLabel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AccountLabel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labelName"),
    2: .same(proto: "labelUrl"),
    3: .same(proto: "labelUrl2"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.labelName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.labelURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.labelURL2) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labelName.isEmpty {
      try visitor.visitSingularStringField(value: self.labelName, fieldNumber: 1)
    }
    if !self.labelURL.isEmpty {
      try visitor.visitSingularStringField(value: self.labelURL, fieldNumber: 2)
    }
    if !self.labelURL2.isEmpty {
      try visitor.visitSingularStringField(value: self.labelURL2, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STAccountLabel, rhs: STAccountLabel) -> Bool {
    if lhs.labelName != rhs.labelName {return false}
    if lhs.labelURL != rhs.labelURL {return false}
    if lhs.labelURL2 != rhs.labelURL2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STHonouredGuestCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "HonouredGuestCard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cardId"),
    2: .same(proto: "levelId"),
    3: .same(proto: "cardName"),
    4: .same(proto: "cardIcon"),
    5: .same(proto: "cardCount"),
    6: .same(proto: "backdropUrl"),
    7: .same(proto: "promptUrl"),
    8: .same(proto: "fontColor"),
    9: .same(proto: "honouredGestUrl"),
    10: .same(proto: "channelNo"),
    11: .same(proto: "channelName"),
    12: .same(proto: "avatarUrl"),
    13: .same(proto: "channelId"),
    14: .same(proto: "wealthValue"),
    15: .same(proto: "protectionValue"),
    16: .same(proto: "levelUpdateTime"),
    17: .same(proto: "systemTime"),
  ]

  fileprivate class _StorageClass {
    var _cardID: Int64 = 0
    var _levelID: Int64 = 0
    var _cardName: String = String()
    var _cardIcon: String = String()
    var _cardCount: Int32 = 0
    var _backdropURL: String = String()
    var _promptURL: String = String()
    var _fontColor: String = String()
    var _honouredGestURL: String = String()
    var _channelNo: Int32 = 0
    var _channelName: String = String()
    var _avatarURL: String = String()
    var _channelID: String = String()
    var _wealthValue: Int64 = 0
    var _protectionValue: Int64 = 0
    var _levelUpdateTime: Int64 = 0
    var _systemTime: Int64 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _cardID = source._cardID
      _levelID = source._levelID
      _cardName = source._cardName
      _cardIcon = source._cardIcon
      _cardCount = source._cardCount
      _backdropURL = source._backdropURL
      _promptURL = source._promptURL
      _fontColor = source._fontColor
      _honouredGestURL = source._honouredGestURL
      _channelNo = source._channelNo
      _channelName = source._channelName
      _avatarURL = source._avatarURL
      _channelID = source._channelID
      _wealthValue = source._wealthValue
      _protectionValue = source._protectionValue
      _levelUpdateTime = source._levelUpdateTime
      _systemTime = source._systemTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._cardID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._levelID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._cardName) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._cardIcon) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._cardCount) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._backdropURL) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._promptURL) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._fontColor) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._honouredGestURL) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._channelNo) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._channelName) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._avatarURL) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._channelID) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._wealthValue) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._protectionValue) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._levelUpdateTime) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._systemTime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._cardID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cardID, fieldNumber: 1)
      }
      if _storage._levelID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._levelID, fieldNumber: 2)
      }
      if !_storage._cardName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardName, fieldNumber: 3)
      }
      if !_storage._cardIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardIcon, fieldNumber: 4)
      }
      if _storage._cardCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._cardCount, fieldNumber: 5)
      }
      if !_storage._backdropURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._backdropURL, fieldNumber: 6)
      }
      if !_storage._promptURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._promptURL, fieldNumber: 7)
      }
      if !_storage._fontColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fontColor, fieldNumber: 8)
      }
      if !_storage._honouredGestURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._honouredGestURL, fieldNumber: 9)
      }
      if _storage._channelNo != 0 {
        try visitor.visitSingularInt32Field(value: _storage._channelNo, fieldNumber: 10)
      }
      if !_storage._channelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelName, fieldNumber: 11)
      }
      if !_storage._avatarURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatarURL, fieldNumber: 12)
      }
      if !_storage._channelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelID, fieldNumber: 13)
      }
      if _storage._wealthValue != 0 {
        try visitor.visitSingularInt64Field(value: _storage._wealthValue, fieldNumber: 14)
      }
      if _storage._protectionValue != 0 {
        try visitor.visitSingularInt64Field(value: _storage._protectionValue, fieldNumber: 15)
      }
      if _storage._levelUpdateTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._levelUpdateTime, fieldNumber: 16)
      }
      if _storage._systemTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._systemTime, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STHonouredGuestCard, rhs: STHonouredGuestCard) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cardID != rhs_storage._cardID {return false}
        if _storage._levelID != rhs_storage._levelID {return false}
        if _storage._cardName != rhs_storage._cardName {return false}
        if _storage._cardIcon != rhs_storage._cardIcon {return false}
        if _storage._cardCount != rhs_storage._cardCount {return false}
        if _storage._backdropURL != rhs_storage._backdropURL {return false}
        if _storage._promptURL != rhs_storage._promptURL {return false}
        if _storage._fontColor != rhs_storage._fontColor {return false}
        if _storage._honouredGestURL != rhs_storage._honouredGestURL {return false}
        if _storage._channelNo != rhs_storage._channelNo {return false}
        if _storage._channelName != rhs_storage._channelName {return false}
        if _storage._avatarURL != rhs_storage._avatarURL {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._wealthValue != rhs_storage._wealthValue {return false}
        if _storage._protectionValue != rhs_storage._protectionValue {return false}
        if _storage._levelUpdateTime != rhs_storage._levelUpdateTime {return false}
        if _storage._systemTime != rhs_storage._systemTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STGiftTopUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GiftTopUser"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "nickname"),
    3: .same(proto: "avatarUrl"),
    4: .same(proto: "finish"),
    5: .same(proto: "giftValue"),
    6: .same(proto: "maxLimitValue"),
    7: .same(proto: "wishSwitch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatarURL) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.finish) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.giftValue) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.maxLimitValue) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.wishSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    if !self.avatarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarURL, fieldNumber: 3)
    }
    if self.finish != 0 {
      try visitor.visitSingularInt32Field(value: self.finish, fieldNumber: 4)
    }
    if self.giftValue != 0 {
      try visitor.visitSingularInt32Field(value: self.giftValue, fieldNumber: 5)
    }
    if self.maxLimitValue != 0 {
      try visitor.visitSingularInt32Field(value: self.maxLimitValue, fieldNumber: 6)
    }
    if self.wishSwitch != 0 {
      try visitor.visitSingularInt32Field(value: self.wishSwitch, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STGiftTopUser, rhs: STGiftTopUser) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.avatarURL != rhs.avatarURL {return false}
    if lhs.finish != rhs.finish {return false}
    if lhs.giftValue != rhs.giftValue {return false}
    if lhs.maxLimitValue != rhs.maxLimitValue {return false}
    if lhs.wishSwitch != rhs.wishSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension STUserInSeatVo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UserInSeatVo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userInSeats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.userInSeats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userInSeats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userInSeats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: STUserInSeatVo, rhs: STUserInSeatVo) -> Bool {
    if lhs.userInSeats != rhs.userInSeats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
